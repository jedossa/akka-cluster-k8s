node {
  role = "data"
  role = ${?NODE_ROLE}
}

akka {
  actor {
    provider = "cluster"
  }
  cluster {
    roles = ["data"]
    roles = [${?NODE_ROLE}]
    sharding {
      role = "data"
      remember-entities = "on"
    }
    role {
      data.min-nr-of-members = 3
    }
  }
  discovery {
    method = kubernetes-api
    kubernetes-api {
      pod-label-selector = "app=general-balance"
      pod-port-name = "management"
    }
  }
  management {
    http {
      port = 8558
    }
    cluster.bootstrap {
      contact-point-discovery {
        service-name = "general-balance-service"
        service-namespace = "default.svc.cluster.local"
      }
      discovery-method = akka.discovery.kubernetes-api
    }
  }
  persistence {
    journal.plugin = "cassandra-journal"
    snapshot-store.plugin = "cassandra-snapshot-store"
  }

  loggers = [de.heikoseeberger.akkalog4j.Log4jLogger]
  logging-filter = de.heikoseeberger.akkalog4j.Log4jLoggingFilter
  log-dead-letters = "off"
}

cassandra-journal {
  contact-points = ["127.0.0.1"]
  contact-points = [${?CASSANDRA_SERVICE_HOST}]
  port = "9042"
  port = ${?CASSANDRA_SERVICE_PORT}
  authentication.username = "cassandra"
  authentication.username = ${?CASSANDRA_USERNAME}
  authentication.password = "cassandra"
  authentication.password = ${?CASSANDRA_PASSWORD}
}

cassandra-snapshot-store {
  contact-points = ["127.0.0.1"]
  contact-points = [${?CASSANDRA_SERVICE_HOST}]
  port = "9042"
  port = ${?CASSANDRA_SERVICE_PORT}
  authentication.username = "cassandra"
  authentication.username = ${?CASSANDRA_USERNAME}
  authentication.password = "cassandra"
  authentication.password = ${?CASSANDRA_PASSWORD}
}
